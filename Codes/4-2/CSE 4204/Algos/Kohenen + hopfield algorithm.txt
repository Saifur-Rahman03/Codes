Kohenen
--------------------------------------
input -> X00 X01 X02
corresponding weight -> W00 W01 W02
distance form first input to first output node (0)
= (X00 - W20)^2 + (X01 - W21)^2 + (X02 - W22)^2

0 , d = 5
1 , d = 3
2 , d = 4
3 , d = 6
4 , d = 2

(4,2) , (1,3) , (2,4) , (0,5) , (3,6)......

minimum distance node = 4

neighbor = 3

neighbors of 4 = (1,2,0)

output nodes to be updated = 4 , 1 , 2 , 0

W40 , W41 , W42
W10 , W11 , W12
W20 , W21 , W22
W00 , W01 , W02

Wij = Wij + learning_rate *(input - Wij)

W40 = W40 + learning_rate * (X00 - W40)
W41 = W41 + learning_rate * (X01 - W41)
W42 = W42 + learning_rate * (X02 - W42)

neighbor = 3
learning_rate = 0.5
neighbor = 3 - learning_rate * 3 = ceil(2.88) = 3
neighbor = 2.88 - learning_rate * 3 = ceil(2.56) = 3
..




while neighbor != 0:
	for i in range(0,7):
		// Step 1
		// Step 2
		// Step 3
		// Step 4
	neighbor = neighbor - learning_rate * neighbor

for input 0 , minimum distance node = 3
for input 1 , minimum distance node = 6

testing phase ->
1. take the testing input
2. calculate the distance from all output nodes
3. sorting in ascending order
4. take the minimum distance node

for input 8 , minimum distance node = 3
input 8 is mapped with output node 3


Hopfield
------------------------------------

W00 , W01 , W02 , W03


new testing pattern = [1 , -1 , 1 , -1]

if summation > 0 : +1
if summation < 0 : -1
if summation == 0 : no change

at first neuron node 
 
1*0 + (-1)*(-2) + 1*(-2) + (-1)*0 = 0

updated pattern = [1 , -1 , 1 , -1]

at second neuron = 1*(-2) + 0 + 2 + 0 = 0 

updated pattern = [1 , -1 , 1 , -1]

at 3rd neuron = -2 - 2 = -4 

updated pattern = [1 , -1 , -1 , -1]

at 4th neuron , 
updated pattern = 0

updated pattern = [1 , -1 , -1 , -1]

at 1st neuron















